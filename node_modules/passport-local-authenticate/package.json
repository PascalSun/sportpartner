{
  "_args": [
    [
      {
        "raw": "passport-local-authenticate",
        "scope": null,
        "escapedName": "passport-local-authenticate",
        "name": "passport-local-authenticate",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/pascal_sun/Google Drive/workplace/Github/MIT-year2/AigleWeb/Project2/sportpartner"
    ]
  ],
  "_from": "passport-local-authenticate@latest",
  "_id": "passport-local-authenticate@1.2.0",
  "_inCache": true,
  "_location": "/passport-local-authenticate",
  "_nodeVersion": "6.2.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/passport-local-authenticate-1.2.0.tgz_1467303192047_0.1339453391265124"
  },
  "_npmUser": {
    "name": "saintedlama",
    "email": "christoph.walcher@gmail.com"
  },
  "_npmVersion": "3.8.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "passport-local-authenticate",
    "scope": null,
    "escapedName": "passport-local-authenticate",
    "name": "passport-local-authenticate",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/passport-local-authenticate/-/passport-local-authenticate-1.2.0.tgz",
  "_shasum": "83d5800924b8d2eb788b8842044d830e72a5dd47",
  "_shrinkwrap": null,
  "_spec": "passport-local-authenticate",
  "_where": "/Users/pascal_sun/Google Drive/workplace/Github/MIT-year2/AigleWeb/Project2/sportpartner",
  "author": {
    "name": "Christoph Walcher",
    "email": "christoph.walcher@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/saintedlama/passport-local-authenticate/issues"
  },
  "dependencies": {
    "generaterr": "^1.5.0",
    "scmp": "^1.0.0",
    "semver": "^5.2.0"
  },
  "description": "Functions for hashing and verifying passwords in a passport-local strategy",
  "devDependencies": {
    "chai": "^3.5.0",
    "coveralls": "^2.11.9",
    "cross-env": "^1.0.8",
    "istanbul": "^0.4.4",
    "mocha": "^2.5.3",
    "mocha-lcov-reporter": "^1.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "83d5800924b8d2eb788b8842044d830e72a5dd47",
    "tarball": "https://registry.npmjs.org/passport-local-authenticate/-/passport-local-authenticate-1.2.0.tgz"
  },
  "engines": {
    "node": ">= 0.9"
  },
  "gitHead": "caa4c20be284916370160419b703e2aba9fd7c83",
  "homepage": "https://github.com/saintedlama/passport-local-authenticate#readme",
  "keywords": [
    "passport",
    "authentication",
    "login"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "saintedlama",
      "email": "christoph.walcher@gmail.com"
    }
  ],
  "name": "passport-local-authenticate",
  "optionalDependencies": {},
  "readme": "# Passport-Local-Authenticate\nEncapsulates methods used to hash and verify user credentials for use in a passport-local strategy. This simplifies building username and password login with [Passport](http://passportjs.org).\n\n[![Build Status](https://travis-ci.org/saintedlama/passport-local-authenticate.png?branch=master)](https://travis-ci.org/saintedlama/passport-local-authenticate)\n[![Coverage Status](https://coveralls.io/repos/saintedlama/passport-local-authenticate/badge.png?branch=master)](https://coveralls.io/r/saintedlama/passport-local-authenticate?branch=master)\n\n## Installation\n\n    $ npm install passport-local-authenticate --save\n\n## Usage\n\n    var auth = require('passport-local-authenticate');\n\n    auth.hash('password', function(err, hashed) {\n      console.log(hashed.hash); // Hashed password\n      console.log(hashed.salt); // Salt\n    });\n\n    auth.hash('password', function(err, hashed) {\n      auth.verify('password', hashed, function(err, verified) {\n        console.log(verified); // True, passwords match\n      ));\n    });\n\n    auth.hash('password', function(err, hashed) {\n      auth.verify('password2', hashed, function(err, verified) {\n        console.log(verified); // False, passwords don't match\n      ));\n    });\n\n**Attention** options.digestAlgorithm is set to 'SHA1' which is not considered too safe but was \nchosen for backward compatibility.\nFuture versions (major) will use some 'SHA-256' digest algorithm!\n\n## Options\n*Attention!* Changing any of the hashing options (saltlen, iterations or keylen) in a production environment will prevent that existing users to authenticate!\n\n* saltlen: specifies the salt length in bytes. Default: 32\n* iterations: specifies the number of iterations used in pbkdf2 hashing algorithm. Default: 25000\n* keylen: specifies the length in byte of the generated key. Default: 512\n* encoding: specifies the encoding the generated salt and hash will be stored in. Defaults to 'hex'.\n* digestAlgorithm: digest algorith to use in pbkdf2. Valid values can be retrieved using crypto.getHashes().\n    A popular choices is 'sha256' or 'sha512'.\n    **Attention** Only working in node.js versions greater 0.10.  And in case your sitting on a 0.10 project consider an upgrade. Really! \n\n### Hash Algorithm\nPassport-Local-Authenticate uses the pbkdf2 algorithm of the node crypto library. \n[Pbkdf2](http://en.wikipedia.org/wiki/PBKDF2) was chosen because platform independent\n(in contrary to bcrypt). For every user a generated salt value is saved to make\nrainbow table attacks even harder.\n\n## License\nPassport-Local-Authenticate is licenses under the [MIT license](http://opensource.org/licenses/MIT).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/saintedlama/passport-local-authenticate.git"
  },
  "scripts": {
    "cover": "cross-env NODE_ENV=test istanbul cover ./node_modules/mocha/bin/_mocha --report html -- -R spec",
    "test": "cross-env NODE_ENV=test mocha -R spec test/"
  },
  "version": "1.2.0"
}
